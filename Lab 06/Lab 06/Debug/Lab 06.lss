
Lab 06.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  00000238  000002ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000238  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000308  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008cc  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000072e  00000000  00000000  00000c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000033e  00000000  00000000  0000139a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  000016d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c8  00000000  00000000  00001780  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000120  00000000  00000000  00001b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001c68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e3       	ldi	r30, 0x38	; 56
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 32       	cpi	r26, 0x2C	; 44
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 a7 00 	call	0x14e	; 0x14e <main>
  8e:	0c 94 1a 01 	jmp	0x234	; 0x234 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <UART_init>:
#define BAUD 9600
#define UBRR_VALUE F_CPU/16/BAUD - 1

// Encendemos el UART 
void UART_init(unsigned int ubrr) {
	UBRR0H = (unsigned char)(ubrr >> 8);
  96:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
  9a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << TXEN0) | (1 << RXEN0);
  9e:	88 e1       	ldi	r24, 0x18	; 24
  a0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
  a4:	86 e0       	ldi	r24, 0x06	; 6
  a6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  aa:	08 95       	ret

000000ac <UART_transmit>:
}

// Definimos funcion para transmitir datos con UART
void UART_transmit(unsigned char data) {
//Verificamos espacio y que queden datos
	while (!(UCSR0A & (1 << UDRE0)));
  ac:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  b0:	95 ff       	sbrs	r25, 5
  b2:	fc cf       	rjmp	.-8      	; 0xac <UART_transmit>
	UDR0 = data;
  b4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  b8:	08 95       	ret

000000ba <UART_receive>:
}

// Definimos funcion para recibir datos con UART
unsigned char UART_receive(void) {
//Verificamos espacio y si aun quedan datos por recibir
	while (!(UCSR0A & (1 << RXC0)));
  ba:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  be:	88 23       	and	r24, r24
  c0:	e4 f7       	brge	.-8      	; 0xba <UART_receive>
	return UDR0;
  c2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
  c6:	08 95       	ret

000000c8 <parrafouart>:

//Creamos funcion para emitir cadenas de texto
void parrafouart(const char* text) {
  c8:	0f 93       	push	r16
  ca:	1f 93       	push	r17
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	8c 01       	movw	r16, r24
	for (int i = 0; text[i] != '\0'; i++) {
  d2:	c0 e0       	ldi	r28, 0x00	; 0
  d4:	d0 e0       	ldi	r29, 0x00	; 0
  d6:	03 c0       	rjmp	.+6      	; 0xde <parrafouart+0x16>
		UART_transmit(text[i]);
  d8:	0e 94 56 00 	call	0xac	; 0xac <UART_transmit>
	return UDR0;
}

//Creamos funcion para emitir cadenas de texto
void parrafouart(const char* text) {
	for (int i = 0; text[i] != '\0'; i++) {
  dc:	21 96       	adiw	r28, 0x01	; 1
  de:	f8 01       	movw	r30, r16
  e0:	ec 0f       	add	r30, r28
  e2:	fd 1f       	adc	r31, r29
  e4:	80 81       	ld	r24, Z
  e6:	81 11       	cpse	r24, r1
  e8:	f7 cf       	rjmp	.-18     	; 0xd8 <parrafouart+0x10>
		UART_transmit(text[i]);
	}
}
  ea:	df 91       	pop	r29
  ec:	cf 91       	pop	r28
  ee:	1f 91       	pop	r17
  f0:	0f 91       	pop	r16
  f2:	08 95       	ret

000000f4 <print_menu>:

//Creamos una secuencia para nuestro menu
void print_menu() {
	parrafouart("Menu:\n");
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	91 e0       	ldi	r25, 0x01	; 1
  f8:	0e 94 64 00 	call	0xc8	; 0xc8 <parrafouart>
	parrafouart("T - Leer potenciómetro\n");
  fc:	87 e0       	ldi	r24, 0x07	; 7
  fe:	91 e0       	ldi	r25, 0x01	; 1
 100:	0e 94 64 00 	call	0xc8	; 0xc8 <parrafouart>
	parrafouart("R - Recibir\n");
 104:	8f e1       	ldi	r24, 0x1F	; 31
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	0e 94 64 00 	call	0xc8	; 0xc8 <parrafouart>
 10c:	08 95       	ret

0000010e <ADC_init>:
}

//Seccion de definicion y configuracion del ADC para el potenciometro
void ADC_init() {
	ADMUX |= (1 << REFS0);
 10e:	ec e7       	ldi	r30, 0x7C	; 124
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	80 64       	ori	r24, 0x40	; 64
 116:	80 83       	st	Z, r24
	//Prescaler a 128
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 118:	ea e7       	ldi	r30, 0x7A	; 122
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	87 68       	ori	r24, 0x87	; 135
 120:	80 83       	st	Z, r24
 122:	08 95       	ret

00000124 <ADC_read>:
}

uint16_t ADC_read(uint8_t channel) {
	//definimos con que canal vamos a trabajar
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);
 124:	ec e7       	ldi	r30, 0x7C	; 124
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	90 81       	ld	r25, Z
 12a:	90 7f       	andi	r25, 0xF0	; 240
 12c:	8f 70       	andi	r24, 0x0F	; 15
 12e:	89 2b       	or	r24, r25
 130:	80 83       	st	Z, r24
	// Iniciamos a convertir
	ADCSRA |= (1 << ADSC);
 132:	ea e7       	ldi	r30, 0x7A	; 122
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	80 64       	ori	r24, 0x40	; 64
 13a:	80 83       	st	Z, r24
	// Esperamos a que ya no hallan datos para convertir :y
	while (ADCSRA & (1 << ADSC));
 13c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 140:	86 fd       	sbrc	r24, 6
 142:	fc cf       	rjmp	.-8      	; 0x13c <ADC_read+0x18>
	// Lectura de ADC 
	return ADC;
 144:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 148:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 14c:	08 95       	ret

0000014e <main>:

int main(void) {
	UART_init(UBRR_VALUE);
 14e:	87 e6       	ldi	r24, 0x67	; 103
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 4b 00 	call	0x96	; 0x96 <UART_init>
	ADC_init();
 156:	0e 94 87 00 	call	0x10e	; 0x10e <ADC_init>
	DDRB = 0xFF; // Configurar Puerto B como salida
 15a:	8f ef       	ldi	r24, 0xFF	; 255
 15c:	84 b9       	out	0x04, r24	; 4

	while(1) {
		char mode;

		print_menu();
 15e:	0e 94 7a 00 	call	0xf4	; 0xf4 <print_menu>

		mode = UART_receive();
 162:	0e 94 5d 00 	call	0xba	; 0xba <UART_receive>

		if (mode == 'T') {
 166:	84 35       	cpi	r24, 0x54	; 84
 168:	09 f0       	breq	.+2      	; 0x16c <main+0x1e>
 16a:	4e c0       	rjmp	.+156    	; 0x208 <main+0xba>
			// Leer el valor del potenciómetro en ADC6
			uint16_t pot_value = ADC_read(6);
 16c:	86 e0       	ldi	r24, 0x06	; 6
 16e:	0e 94 92 00 	call	0x124	; 0x124 <ADC_read>
 172:	8c 01       	movw	r16, r24
			//Vamos a mostrar cada digito por separado, de centenas para abajo 
			//Seccion centenas
			UART_transmit((pot_value / 100) + '0');
 174:	9c 01       	movw	r18, r24
 176:	36 95       	lsr	r19
 178:	27 95       	ror	r18
 17a:	36 95       	lsr	r19
 17c:	27 95       	ror	r18
 17e:	ab e7       	ldi	r26, 0x7B	; 123
 180:	b4 e1       	ldi	r27, 0x14	; 20
 182:	0e 94 0b 01 	call	0x216	; 0x216 <__umulhisi3>
 186:	96 95       	lsr	r25
 188:	87 95       	ror	r24
 18a:	80 5d       	subi	r24, 0xD0	; 208
 18c:	0e 94 56 00 	call	0xac	; 0xac <UART_transmit>
			// Seccion decenas
			UART_transmit(((pot_value / 10) % 10) + '0');
 190:	98 01       	movw	r18, r16
 192:	ad ec       	ldi	r26, 0xCD	; 205
 194:	bc ec       	ldi	r27, 0xCC	; 204
 196:	0e 94 0b 01 	call	0x216	; 0x216 <__umulhisi3>
 19a:	ec 01       	movw	r28, r24
 19c:	d6 95       	lsr	r29
 19e:	c7 95       	ror	r28
 1a0:	d6 95       	lsr	r29
 1a2:	c7 95       	ror	r28
 1a4:	d6 95       	lsr	r29
 1a6:	c7 95       	ror	r28
 1a8:	9e 01       	movw	r18, r28
 1aa:	0e 94 0b 01 	call	0x216	; 0x216 <__umulhisi3>
 1ae:	96 95       	lsr	r25
 1b0:	87 95       	ror	r24
 1b2:	96 95       	lsr	r25
 1b4:	87 95       	ror	r24
 1b6:	96 95       	lsr	r25
 1b8:	87 95       	ror	r24
 1ba:	9c 01       	movw	r18, r24
 1bc:	22 0f       	add	r18, r18
 1be:	33 1f       	adc	r19, r19
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	82 0f       	add	r24, r18
 1ce:	93 1f       	adc	r25, r19
 1d0:	9e 01       	movw	r18, r28
 1d2:	28 1b       	sub	r18, r24
 1d4:	39 0b       	sbc	r19, r25
 1d6:	c9 01       	movw	r24, r18
 1d8:	80 5d       	subi	r24, 0xD0	; 208
 1da:	0e 94 56 00 	call	0xac	; 0xac <UART_transmit>
			// Seccion unidades
			UART_transmit((pot_value % 10) + '0');
 1de:	ce 01       	movw	r24, r28
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	cc 0f       	add	r28, r28
 1e6:	dd 1f       	adc	r29, r29
 1e8:	cc 0f       	add	r28, r28
 1ea:	dd 1f       	adc	r29, r29
 1ec:	cc 0f       	add	r28, r28
 1ee:	dd 1f       	adc	r29, r29
 1f0:	c8 0f       	add	r28, r24
 1f2:	d9 1f       	adc	r29, r25
 1f4:	c8 01       	movw	r24, r16
 1f6:	8c 1b       	sub	r24, r28
 1f8:	9d 0b       	sbc	r25, r29
 1fa:	80 5d       	subi	r24, 0xD0	; 208
 1fc:	0e 94 56 00 	call	0xac	; 0xac <UART_transmit>
			// Hacemos un salto de linea por estetica 
			UART_transmit('\n');
 200:	8a e0       	ldi	r24, 0x0A	; 10
 202:	0e 94 56 00 	call	0xac	; 0xac <UART_transmit>
 206:	ab cf       	rjmp	.-170    	; 0x15e <main+0x10>
			} else if (mode == 'R') {
 208:	82 35       	cpi	r24, 0x52	; 82
 20a:	09 f0       	breq	.+2      	; 0x20e <main+0xc0>
 20c:	a8 cf       	rjmp	.-176    	; 0x15e <main+0x10>
			//Definimos la seccion de enviar ASCII a los LEDS
			char received_char = UART_receive();
 20e:	0e 94 5d 00 	call	0xba	; 0xba <UART_receive>
			PORTB = received_char;
 212:	85 b9       	out	0x05, r24	; 5
 214:	a4 cf       	rjmp	.-184    	; 0x15e <main+0x10>

00000216 <__umulhisi3>:
 216:	a2 9f       	mul	r26, r18
 218:	b0 01       	movw	r22, r0
 21a:	b3 9f       	mul	r27, r19
 21c:	c0 01       	movw	r24, r0
 21e:	a3 9f       	mul	r26, r19
 220:	70 0d       	add	r23, r0
 222:	81 1d       	adc	r24, r1
 224:	11 24       	eor	r1, r1
 226:	91 1d       	adc	r25, r1
 228:	b2 9f       	mul	r27, r18
 22a:	70 0d       	add	r23, r0
 22c:	81 1d       	adc	r24, r1
 22e:	11 24       	eor	r1, r1
 230:	91 1d       	adc	r25, r1
 232:	08 95       	ret

00000234 <_exit>:
 234:	f8 94       	cli

00000236 <__stop_program>:
 236:	ff cf       	rjmp	.-2      	; 0x236 <__stop_program>
