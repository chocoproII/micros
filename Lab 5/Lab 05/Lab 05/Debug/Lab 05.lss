
Lab 05.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000028a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000236  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000028a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b88  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000087d  00000000  00000000  00000f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005b4  00000000  00000000  000017a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000fc  00000000  00000000  00001d60  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000497  00000000  00000000  00001e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000187  00000000  00000000  000022f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  0000247a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 30       	cpi	r26, 0x00	; 0
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 b1 00 	call	0x162	; 0x162 <main>
  88:	0c 94 19 01 	jmp	0x232	; 0x232 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setup_timer1_pwm>:
uint8_t dutyCycle3 = 0;

//Encendido del PWM con timer 
void setup_timer1_pwm() {
	// Configurar el Timer1 para modo PWM de 8 bits (Ajuste en fase, no invertido)
	TCCR1A |= (1 << COM1A1) | (1 << WGM10);
  90:	e0 e8       	ldi	r30, 0x80	; 128
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	81 68       	ori	r24, 0x81	; 129
  98:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << CS11); // Preescalador de 8
  9a:	e1 e8       	ldi	r30, 0x81	; 129
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	8a 60       	ori	r24, 0x0A	; 10
  a2:	80 83       	st	Z, r24
	
	// Configurar el pin OC1A (pin 9 en el Arduino Nano) como salida
	DDRD |= (1 << PD3);
  a4:	8a b1       	in	r24, 0x0a	; 10
  a6:	88 60       	ori	r24, 0x08	; 8
  a8:	8a b9       	out	0x0a, r24	; 10
  aa:	08 95       	ret

000000ac <set_pwm_duty_cycle>:
}
//Le decimos al timer 0 que trabaje con las bases de duty cicle
void set_pwm_duty_cycle(uint8_t duty_cycle) {
	// Establecer el ciclo de trabajo (duty cycle) del PWM
	OCR1A = duty_cycle;
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  b2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
  b6:	08 95       	ret

000000b8 <ADC_init>:
}

//Seccion de encendido del ADC
void ADC_init(void) {
	ADMUX |= (1 << REFS0);
  b8:	ec e7       	ldi	r30, 0x7C	; 124
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	80 64       	ori	r24, 0x40	; 64
  c0:	80 83       	st	Z, r24
	//Se enciende el ISR del ADC
	ADCSRA |= (1<<ADIE);
  c2:	ea e7       	ldi	r30, 0x7A	; 122
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	88 60       	ori	r24, 0x08	; 8
  ca:	80 83       	st	Z, r24

	//Se deja encendido el ADC
	//Prescaler definido
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  cc:	80 81       	ld	r24, Z
  ce:	87 68       	ori	r24, 0x87	; 135
  d0:	80 83       	st	Z, r24
	DIDR0 |= (1<<ADC5D); 
  d2:	ee e7       	ldi	r30, 0x7E	; 126
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	80 62       	ori	r24, 0x20	; 32
  da:	80 83       	st	Z, r24
  dc:	08 95       	ret

000000de <ADC_read>:
}

// Función para leer el valor del ADC
uint16_t ADC_read(uint8_t adc_channel) {
	// Limpiar los bits de selección de canal anterior
	ADMUX &= 0xF0;
  de:	ec e7       	ldi	r30, 0x7C	; 124
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	90 81       	ld	r25, Z
  e4:	90 7f       	andi	r25, 0xF0	; 240
  e6:	90 83       	st	Z, r25
	// Seleccionar el canal de ADC
	ADMUX |= adc_channel;
  e8:	90 81       	ld	r25, Z
  ea:	89 2b       	or	r24, r25
  ec:	80 83       	st	Z, r24
	// Iniciar la conversión
	ADCSRA |= (1 << ADSC);
  ee:	ea e7       	ldi	r30, 0x7A	; 122
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	80 64       	ori	r24, 0x40	; 64
  f6:	80 83       	st	Z, r24
	// Esperar hasta que la conversión esté completa
	while (ADCSRA & (1 << ADSC));
  f8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  fc:	86 fd       	sbrc	r24, 6
  fe:	fc cf       	rjmp	.-8      	; 0xf8 <ADC_read+0x1a>
	// Devolver el valor del ADC
	return ADC;
 100:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 104:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 108:	08 95       	ret

0000010a <ADC_read2>:

// Función para leer el valor del ADC
uint16_t ADC_read2(uint8_t adc_channel2) {
	// Limpiar los bits de selección de canal anterior
	ADMUX &= 0xF0;
 10a:	ec e7       	ldi	r30, 0x7C	; 124
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	90 81       	ld	r25, Z
 110:	90 7f       	andi	r25, 0xF0	; 240
 112:	90 83       	st	Z, r25
	// Seleccionar el canal de ADC
	ADMUX |= adc_channel2;
 114:	90 81       	ld	r25, Z
 116:	89 2b       	or	r24, r25
 118:	80 83       	st	Z, r24
	// Iniciar la conversión
	ADCSRA |= (1 << ADSC);
 11a:	ea e7       	ldi	r30, 0x7A	; 122
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	80 64       	ori	r24, 0x40	; 64
 122:	80 83       	st	Z, r24
	// Esperar hasta que la conversión esté completa
	while (ADCSRA & (1 << ADSC));
 124:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 128:	86 fd       	sbrc	r24, 6
 12a:	fc cf       	rjmp	.-8      	; 0x124 <ADC_read2+0x1a>
	// Devolver el valor del ADC
	return ADC;
 12c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 130:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 134:	08 95       	ret

00000136 <ADC_read3>:

// Función para leer el valor del ADC
uint16_t ADC_read3(uint8_t adc_channel3) {
	// Limpiar los bits de selección de canal anterior
	ADMUX &= 0xF0;
 136:	ec e7       	ldi	r30, 0x7C	; 124
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	90 81       	ld	r25, Z
 13c:	90 7f       	andi	r25, 0xF0	; 240
 13e:	90 83       	st	Z, r25
	// Seleccionar el canal de ADC
	ADMUX |= adc_channel3;
 140:	90 81       	ld	r25, Z
 142:	89 2b       	or	r24, r25
 144:	80 83       	st	Z, r24
	// Iniciar la conversión
	ADCSRA |= (1 << ADSC);
 146:	ea e7       	ldi	r30, 0x7A	; 122
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	80 64       	ori	r24, 0x40	; 64
 14e:	80 83       	st	Z, r24
	// Esperar hasta que la conversión esté completa
	while (ADCSRA & (1 << ADSC));
 150:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 154:	86 fd       	sbrc	r24, 6
 156:	fc cf       	rjmp	.-8      	; 0x150 <ADC_read3+0x1a>
	// Devolver el valor del ADC
	return ADC;
 158:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 15c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 160:	08 95       	ret

00000162 <main>:

int main(void)
{
	initPWM0FastA(0,1024);
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	74 e0       	ldi	r23, 0x04	; 4
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <initPWM0FastA>
	initPWM0FastB(0,1024);
 16c:	60 e0       	ldi	r22, 0x00	; 0
 16e:	74 e0       	ldi	r23, 0x04	; 4
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	0e 94 03 01 	call	0x206	; 0x206 <initPWM0FastB>
	setup();
	ADC_init();
 176:	0e 94 5c 00 	call	0xb8	; 0xb8 <ADC_init>
    // Llamar a la función de configuración del Timer1 para PWM
    setup_timer1_pwm();
 17a:	0e 94 48 00 	call	0x90	; 0x90 <setup_timer1_pwm>
	updateDCA(0);
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	0e 94 01 01 	call	0x202	; 0x202 <updateDCA>
	updateDCB(0);
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	0e 94 17 01 	call	0x22e	; 0x22e <updateDCB>
    while (1) 
    {	 
		 // Configurar el ciclo de trabajo del PWM (0 a 255)	
		uint16_t dutyCycle1 = ADC_read(6);	
 18a:	86 e0       	ldi	r24, 0x06	; 6
 18c:	0e 94 6f 00 	call	0xde	; 0xde <ADC_read>
 190:	18 2f       	mov	r17, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 192:	8f e3       	ldi	r24, 0x3F	; 63
 194:	9c e9       	ldi	r25, 0x9C	; 156
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <main+0x34>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0x3a>
 19c:	00 00       	nop
		_delay_ms(10);
		uint16_t dutyCycle2 = ADC_read2(7);
 19e:	87 e0       	ldi	r24, 0x07	; 7
 1a0:	0e 94 85 00 	call	0x10a	; 0x10a <ADC_read2>
 1a4:	d8 2f       	mov	r29, r24
		uint16_t dutyCycle3 = ADC_read3(5);
 1a6:	85 e0       	ldi	r24, 0x05	; 5
 1a8:	0e 94 9b 00 	call	0x136	; 0x136 <ADC_read3>
 1ac:	c8 2f       	mov	r28, r24
		updateDCA(dutyCycle1);
 1ae:	81 2f       	mov	r24, r17
 1b0:	0e 94 01 01 	call	0x202	; 0x202 <updateDCA>
		updateDCB(dutyCycle2);
 1b4:	8d 2f       	mov	r24, r29
 1b6:	0e 94 17 01 	call	0x22e	; 0x22e <updateDCB>
		set_pwm_duty_cycle(dutyCycle3);
 1ba:	8c 2f       	mov	r24, r28
 1bc:	0e 94 56 00 	call	0xac	; 0xac <set_pwm_duty_cycle>
 1c0:	9f e7       	ldi	r25, 0x7F	; 127
 1c2:	28 e3       	ldi	r18, 0x38	; 56
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	91 50       	subi	r25, 0x01	; 1
 1c8:	20 40       	sbci	r18, 0x00	; 0
 1ca:	80 40       	sbci	r24, 0x00	; 0
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <main+0x64>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <main+0x6e>
 1d0:	00 00       	nop
 1d2:	db cf       	rjmp	.-74     	; 0x18a <main+0x28>

000001d4 <initPWM0FastA>:
#include "PWM0.h"

void initPWM0FastA(uint8_t inverted, uint16_t precaler){
		//Pin de salida del servo 1 (OC0A)
		DDRD |=(1<<DDD6);
 1d4:	9a b1       	in	r25, 0x0a	; 10
 1d6:	90 64       	ori	r25, 0x40	; 64
 1d8:	9a b9       	out	0x0a, r25	; 10
		
		
		TCCR0A = 0;
 1da:	14 bc       	out	0x24, r1	; 36
//		TCCR0B = 0;

	if (inverted)
 1dc:	88 23       	and	r24, r24
 1de:	21 f0       	breq	.+8      	; 0x1e8 <initPWM0FastA+0x14>
	{
		//Se deja el OC0A como invertido
		TCCR0A |= (1<<COM0A1)|(1<<COM0A0);
 1e0:	84 b5       	in	r24, 0x24	; 36
 1e2:	80 6c       	ori	r24, 0xC0	; 192
 1e4:	84 bd       	out	0x24, r24	; 36
 1e6:	03 c0       	rjmp	.+6      	; 0x1ee <initPWM0FastA+0x1a>
		}else{
		//Se deja el OC0A como no invertido
		TCCR0A |= (1<<COM0A1);
 1e8:	84 b5       	in	r24, 0x24	; 36
 1ea:	80 68       	ori	r24, 0x80	; 128
 1ec:	84 bd       	out	0x24, r24	; 36
	}

				
		//Configura modo PWM FAST TOP = 0xFF
		TCCR0A |= (1<<WGM01)|(1<<WGM00);
 1ee:	84 b5       	in	r24, 0x24	; 36
 1f0:	83 60       	ori	r24, 0x03	; 3
 1f2:	84 bd       	out	0x24, r24	; 36
		
		if (precaler==1024)
 1f4:	61 15       	cp	r22, r1
 1f6:	74 40       	sbci	r23, 0x04	; 4
 1f8:	19 f4       	brne	.+6      	; 0x200 <initPWM0FastA+0x2c>
		{
		//Prescaler de 1024
		TCCR0B |= (1<<CS02)|(1<<CS00);	
 1fa:	85 b5       	in	r24, 0x25	; 37
 1fc:	85 60       	ori	r24, 0x05	; 5
 1fe:	85 bd       	out	0x25, r24	; 37
 200:	08 95       	ret

00000202 <updateDCA>:
}



void updateDCA(uint8_t duty){
	OCR0A = duty;	
 202:	87 bd       	out	0x27, r24	; 39
 204:	08 95       	ret

00000206 <initPWM0FastB>:
#include "PWM1.h"
void initPWM0FastB(uint8_t inverted, uint16_t precaler){
	//Pin de salida del servo 2 (OC0B)
	DDRD |=(1<<DDD5);
 206:	9a b1       	in	r25, 0x0a	; 10
 208:	90 62       	ori	r25, 0x20	; 32
 20a:	9a b9       	out	0x0a, r25	; 10
	
	
	//	TCCR0A = 0;
	TCCR0B = 0;
 20c:	15 bc       	out	0x25, r1	; 37
	
	if (inverted)
 20e:	88 23       	and	r24, r24
 210:	21 f0       	breq	.+8      	; 0x21a <initPWM0FastB+0x14>
	{
		//Se deja el OC0A como invertido
		TCCR0A |= (1<<COM0B1)|(1<<COM0B0);
 212:	84 b5       	in	r24, 0x24	; 36
 214:	80 63       	ori	r24, 0x30	; 48
 216:	84 bd       	out	0x24, r24	; 36
 218:	03 c0       	rjmp	.+6      	; 0x220 <initPWM0FastB+0x1a>
		}else{
		//Se deja el OC0A como no invertido
		TCCR0A |= (1<<COM0B1);
 21a:	84 b5       	in	r24, 0x24	; 36
 21c:	80 62       	ori	r24, 0x20	; 32
 21e:	84 bd       	out	0x24, r24	; 36
	}
	
	//Configura modo PWM FAST TOP = 0xFF
	TCCR0A |= (1<<WGM01)|(1<<WGM00);
 220:	84 b5       	in	r24, 0x24	; 36
 222:	83 60       	ori	r24, 0x03	; 3
 224:	84 bd       	out	0x24, r24	; 36
	
	//Prescaler de 1024
	TCCR0B |= (1<<CS02)|(1<<CS00);
 226:	85 b5       	in	r24, 0x25	; 37
 228:	85 60       	ori	r24, 0x05	; 5
 22a:	85 bd       	out	0x25, r24	; 37
 22c:	08 95       	ret

0000022e <updateDCB>:
	
}

void updateDCB(uint8_t duty){
	OCR0B = duty;
 22e:	88 bd       	out	0x28, r24	; 40
 230:	08 95       	ret

00000232 <_exit>:
 232:	f8 94       	cli

00000234 <__stop_program>:
 234:	ff cf       	rjmp	.-2      	; 0x234 <__stop_program>
